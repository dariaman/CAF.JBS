@{
    ViewData["Title"] = "Quote";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    th input {
        width: 100%;
    }

    table.dataTable thead tr th.search {
        padding: 10px 8px;
    }
</style>
<h2>Quote</h2>
<br />

<br />
<table id="myTable" class="stripe">
    <thead>
        <tr>
            <th>QuoteID</th>
            <th>RefNo</th>
            <th>PolicyID</th>
            <th>PolicyNo</th>
            <th>HolderName</th>
            <th>PremiAmount</th>
            <th>PaperPrintFee</th>
            <th>CashlessFee</th>
            <th>TotalAmount</th>
            <th>Status</th>
            <th>LastUploadDate</th>
            <th>CancelDate</th>
            <th style="min-width:80px;">PaidDate</th>
            <th style="min-width:80px;">DateCrt</th>
            <th>ACCNo</th>
            <th>ACCName</th>
            <th>CCExpiry</th>
            <th>CardIssuerBank</th>
        </tr>
    </thead>
    <tfoot>
        <tr>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
            <th class="search"></th>
        </tr>
    </tfoot>
</table>


<script>
    /* ===========  Pipeline  ===============*/
    $.fn.dataTable.pipeline = function (opts) {
        // Configuration options
        var conf = $.extend({
            pages: 5,     // number of pages to cache
            url: '',      // script url
            data: null,   // function or object with parameters to send to the server
            // matching how `ajax.data` works in DataTables
            method: 'POST' // Ajax HTTP method
        }, opts);

        // Private variables for storing the cache
        var cacheLower = -1;
        var cacheUpper = null;
        var cacheLastRequest = null;
        var cacheLastJson = null;

        return function (request, drawCallback, settings) {
            var ajax = false;
            var requestStart = request.start;
            var drawStart = request.start;
            var requestLength = request.length;
            var requestEnd = requestStart + requestLength;

            if (settings.clearCache) {
                // API requested that the cache be cleared
                ajax = true;
                settings.clearCache = false;
            }
            else if (cacheLower < 0 || requestStart < cacheLower || requestEnd > cacheUpper) {
                // outside cached data - need to make a request
                ajax = true;
            }
            else if (JSON.stringify(request.order) !== JSON.stringify(cacheLastRequest.order) ||
                      JSON.stringify(request.columns) !== JSON.stringify(cacheLastRequest.columns) ||
                      JSON.stringify(request.search) !== JSON.stringify(cacheLastRequest.search)
            ) {
                // properties changed (ordering, columns, searching)
                ajax = true;
            }

            // Store the request for checking next time around
            cacheLastRequest = $.extend(true, {}, request);

            if (ajax) {
                // Need data from the server
                if (requestStart < cacheLower) {
                    requestStart = requestStart - (requestLength * (conf.pages - 1));

                    if (requestStart < 0) {
                        requestStart = 0;
                    }
                }

                cacheLower = requestStart;
                cacheUpper = requestStart + (requestLength * conf.pages);

                request.start = requestStart;
                request.length = requestLength * conf.pages;

                // Provide the same `data` options as DataTables.
                if (typeof conf.data === 'function') {
                    // As a function it is executed with the data object as an arg
                    // for manipulation. If an object is returned, it is used as the
                    // data object to submit
                    var d = conf.data(request);
                    if (d) {
                        $.extend(request, d);
                    }
                }
                else if ($.isPlainObject(conf.data)) {
                    // As an object, the data given extends the default
                    $.extend(request, conf.data);
                }

                settings.jqXHR = $.ajax({
                    "type": conf.method,
                    "url": conf.url,
                    "data": request,
                    "dataType": "json",
                    "cache": false,
                    "success": function (json) {
                        cacheLastJson = $.extend(true, {}, json);

                        if (cacheLower != drawStart) {
                            json.data.splice(0, drawStart - cacheLower);
                        }
                        if (requestLength >= -1) {
                            json.data.splice(requestLength, json.data.length);
                        }
                        drawCallback(json);
                    }
                });
            }
            else {
                json = $.extend(true, {}, cacheLastJson);
                json.draw = request.draw; // Update the echo for each response
                json.data.splice(0, requestStart - cacheLower);
                json.data.splice(requestLength, json.data.length);

                drawCallback(json);
            }
        }
    };

    // Register an API method that will empty the pipelined data, forcing an Ajax
    // fetch on the next draw (i.e. `table.clearPipeline().draw()`)
    $.fn.dataTable.Api.register('clearPipeline()', function () {
        return this.iterator('table', function (settings) {
            settings.clearCache = true;
        });
    });
    /* ===========  END Pipeline  ===============*/

    $(document).ready(function () {
        $('#myTable').dataTable({
            serverSide: true,
            processing: true,
            initComplete: function () {
                var r = $('#myTable tfoot tr');
                $('#myTable thead').append(r);
                $('#search_0').css('text-align', 'center');

                this.api().columns([9]).every(function () {
                    var column = this;
                    var select = $('<select><option value=""> ... </option></select>')
                        .appendTo($(column.footer()).empty())
                        .on('change', function () {
                            column.search(this.value).draw();
                        });
                    select.append('<option value="A">Unpaid</option>');
                    select.append('<option value="C">Cancel</option>');
                    select.append('<option value="P">Paid</option>');
                });

                this.api().columns([10]).every(function () {
                    var column = this;
                    var select = $('<input type="date" placeholder=" ... " />')
                        .appendTo($(column.footer()).empty())
                        .on('keyup change', function () {
                            if (column.search() !== this.value) {
                                if (this.value == 'mm/dd/yyyy') { this.value = '' }
                                column.search(this.value).draw();
                            }
                        });
                });
            },
            dom: '<"top"B>tr<"bottom"ip>',
            language: {
                "decimal": ",",
                "thousands": ".",
                "zeroRecords": "No Data",
                "infoEmpty": "No Data",
            },
            ajax: $.fn.dataTable.pipeline({
                "url": "@Url.Action("PageData", "QuoteBilling")",
                pages: 5, // number of pages to cache
                "type": "POST"
            }),
            columns: [
                { data: "quote_id", className: "dt-right" },
                { data: "ref_no", className: "dt-right" },
                { data: "policy_id", className: "dt-right" },
                { data: "policy_no", className: "dt-right" },
                { data: "holder_Name" },
                {
                    data: "prospect_amount",
                    searchable: false,
                    render: $.fn.dataTable.render.number(',', '.', 0, ''),
                    className: "dt-right"
                },
                {
                    data: "paper_print_fee",
                    searchable: false,
                    render: $.fn.dataTable.render.number(',', '.', 0, ''),
                    className: "dt-right"
                },
                {
                    data: "cashless_fee",
                    searchable: false,
                    render: $.fn.dataTable.render.number(',', '.', 0, ''),
                    className: "dt-right"
                },
                {
                    data: "totalAmount",
                    searchable: false,
                    render: $.fn.dataTable.render.number(',', '.', 0, ''),
                    className: "dt-right"
                },
                {
                    data: "status",
                    className: "dt-center",
                    render: function (data) { return (data == "P" ? "Paid" : (data == "C" ? "Cancel" : "Unpaid")) }
                },
                {
                    data: "lastUploadDate",
                    className: "dt-right",
                    render: function (data) {
                        var tgl = new Date(data);
                        return data == null ? "" : tgl.toLocaleDateString("en-GB", { year: "numeric", month: "short", day: "numeric" })
                    }
                },
                {
                    data: "cancel_date",
                    searchable: false,
                    className: "dt-right",
                    render: function (data) {
                        var tgl = new Date(data);
                        return data == null ? "" : tgl.toLocaleDateString("en-GB", { year: "numeric", month: "short", day: "numeric" })
                    }
                },
                {
                    data: "paid_dt",
                    searchable: false,
                    className: "dt-right",
                    render: function (data) {
                        var tgl = new Date(data);
                        return data == null ? "" : tgl.toLocaleDateString("en-GB", { year: "numeric", month: "short", day: "numeric" })
                    }
                },
                {
                    data: "dateCrt",
                    searchable: false,
                    className: "dt-right",
                    render: function (data) {
                        var tgl = new Date(data);
                        return data == null ? "" : tgl.toLocaleDateString("en-GB", { year: "numeric", month: "short", day: "numeric" })
                    }
                },
                { data: "acc_no", className: "dt-center" },
                { data: "acc_name" },
                { data: "cc_expiry", className: "dt-right" },
                { data: "bank_code" },
            ]
        });

        $('#myTable tfoot th').filter(":eq(0),:eq(1),:eq(2),:eq(3),:eq(4)").each(function () {
            var title = $(this).text();
            $(this).html('<input type="text" placeholder=" ... " />');
        });

        // DataTable
        var table = $('#myTable').DataTable();

        /* Apply the search for individual columns*/
        table.columns().every(function () {
            var that = this;
            $('input', this.footer()).on('focusout', function () {
                if (that.search() !== this.value) {
                    that.search(this.value).draw();
                }
            });

            $('input', this.footer()).on('keyup change', function (ev) {
                if (ev.keyCode == 13) { //only on enter keypress (code 13)
                    if (that.search() !== this.value) {
                        that.search(this.value).draw();
                    }
                }
            });
        });

        $('#myTable tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected');
            }
            else {
                table.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });
    });
</script>